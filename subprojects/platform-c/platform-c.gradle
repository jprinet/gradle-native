plugins {
	id 'nokeebuild.java-gradle-plugin'
	id 'nokeebuild.gradle-plugin-unit-test'
	id 'nokeebuild.gradle-plugin-functional-test'
	id 'maven-publish'
}

gradlePlugin {
	plugins {
		cApplication {
			id = 'dev.nokee.c-application'
			implementationClass = 'dev.nokee.platform.c.internal.plugins.CApplicationPlugin'
		}
		cLibrary {
			id = 'dev.nokee.c-library'
			implementationClass = 'dev.nokee.platform.c.internal.plugins.CLibraryPlugin'
		}
	}

	dependencies {
		api project(':platformNative')
		implementation project(':coreUtils')
		implementation project(':languageC')
		implementation "com.google.guava:guava:${guavaVersion}"
		implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
		implementation "commons-io:commons-io:${commonsIoVersion}"
		implementation project(':coreExec')
		implementation project(':runtimeDarwin')
	}
}

test {
	dependencies {
		implementation testFixtures(project(':platformBase'))
		implementation testFixtures(project(':platformNative'))
		implementation testFixtures(project(':coreModel'))
		implementation testFixtures(project(':languageC'))
		implementation gradleTestKit(minimumGradleVersion)
	}
}

functionalTest {
	dependencies {
		implementation project(':runtimeNative')
		implementation 'dev.nokee:templates:latest.integration'
		implementation testFixtures(project(':platformNative'))
		implementation testFixtures(project(':languageC'))
	}
}

def fingerprinter = services.get(org.gradle.internal.fingerprint.classpath.ClasspathFingerprinter)
tasks.withType(Test).configureEach { task ->
    doFirst {
        ClassLoader classLoader = task.jvmArgumentProviders[0].getClass().classLoader
        while (classLoader instanceof URLClassLoader) {
            def fingerprints = [] as Set
            def allFiles = [] as Set
            classLoader.getURLs().each {
                fingerprints.add(["${task.path}:${file(it.file).name}", "${fingerprinter.fingerprint(files(it.file)).hash}"])
                allFiles.add(file(it.file))
            }
            fingerprints.each { buildScan.value it[0], it[1] }
            buildScan.value "${task.path}:jvmArgumentProvider[0]:classpath", allFiles.join("\n")
            classLoader = classLoader.parent
        }
    }
}
